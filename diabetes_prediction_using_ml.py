# -*- coding: utf-8 -*-
"""diabetes prediction using ml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xP_DE2rqcql_cnbhVuQaySvkHI5CODCB
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
import tensorflow as tf

heart_data= pd.read_csv('/content/diabetes.csv')

heart_data.tail()

X = heart_data.iloc[:,:-1]
Y = heart_data.iloc[:,-1]
print(X)
print(Y)

heart_data.isnull().sum()

print("Mean of Pregnancies=",heart_data['Pregnancies'].mean())
print("Mean of Glucose=",heart_data['Glucose'].mean())
print("Mean of BloodPressure=",heart_data['BloodPressure'].mean())
print("Mean of SkinThickness=",heart_data['SkinThickness'].mean())
print("Mean of Insulin=",heart_data['Insulin'].mean())
print("Mean of BMI=",heart_data['BMI'].mean())
print("Mean of DiabetesPedigreeFunction=",heart_data['DiabetesPedigreeFunction'].mean())
print("Mean of Age=",heart_data['Age'].mean())

print("Median of Pregnancies=",heart_data['Pregnancies'].median())
print("Median of Glucose=",heart_data['Glucose'].median())
print("Median of BloodPressure=",heart_data['BloodPressure'].median())
print("Median of SkinThickness=",heart_data['SkinThickness'].median())
print("Median of Insulin=",heart_data['Insulin'].median())
print("Median of BMI=",heart_data['BMI'].median())
print("Median of DiabetesPedigreeFunction=",heart_data['DiabetesPedigreeFunction'].median())
print("Median of Age=",heart_data['Age'].median())

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 0)

ml = tf.keras.models.Sequential()

ml.add(tf.keras.layers.Dense(units=12, activation='relu'))

ml.add(tf.keras.layers.Dense(units=8, activation='relu'))

ml.add(tf.keras.layers.Dense(units=4, activation='relu'))

ml.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

ml.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

history = ml.fit(X_train,Y_train, batch_size = 32, epochs = 500)

y_pred = ml.predict(X_test)
y_pred = (y_pred > 0.5)

from sklearn.metrics import accuracy_score
accuracy_score(Y_test, y_pred)

import numpy as np
# take input from user
pregnancies = int(input("Enter number of pregnancies: "))
glucose = int(input("Enter glucose level: "))
blood_pressure = int(input("Enter blood pressure: "))
skin_thickness = int(input("Enter skin thickness: "))
insulin = int(input("Enter insulin level: "))
bmi = float(input("Enter BMI: "))
dpf = float(input("Enter diabetes pedigree function: "))
age = int(input("Enter age: "))

# create input_data tuple
input_data = (pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, dpf, age)

input_data_to_np = np.asarray(input_data)

#reshaping
input_data_reshape = input_data_to_np.reshape(1,-1)

prediction = ml.predict(input_data_reshape)

print(prediction)

if(prediction == 0):
  print("Congratulations! You dont have diabetes")
else:
  print("I'm sorry, you have diabetes")